{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ethUtil","require","bnToHex","inputBn","addHexPrefix","toString","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_provider","window","ethereum","state","account","ethQueryBalance","web3Balance","ethjsBalance","error","loadEthQueryBalance","bind","assertThisInitialized","loadWeb3Balance","loadEthJsBalance","loadWeb3","loadEthJs","web3","Web3","enable","accounts","setState","_context","t0","ethjs","EthJs","query","pify","EthQuery","getBalance","balance","addressArray","ethContract","eth","contract","SINGLE_CALL_BALANCES_ABI","at","ethBalance","balances","result","log","_this2","_this3","react_default","a","createElement","className","onClick","style","color","message","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a43af5d0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport EthJs from 'ethjs'\nimport EthQuery from 'eth-query'\nimport SINGLE_CALL_BALANCES_ABI from 'single-call-balance-checker-abi'\nimport pify from 'pify'\nimport log from 'loglevel'\n\nconst ethUtil = require('ethereumjs-util')\nconst SINGLE_CALL_BALANCES_ADDRESS = '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this._provider = window.ethereum\n    this.state = {\n      account: '',\n      ethQueryBalance: '',\n      web3Balance: '',\n      ethjsBalance: '',\n      error: {}\n    }\n\n    this.loadEthQueryBalance = this.loadEthQueryBalance.bind(this)\n    this.loadWeb3Balance = this.loadWeb3Balance.bind(this)\n    this.loadEthJsBalance = this.loadEthJsBalance.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadWeb3()\n    this.loadEthJs()\n  }\n\n  componentDidUpdate() {\n    if (this.state.error === '' && this.state.ethQueryBalance === '') {\n      this.loadEthQueryBalance()\n    }\n\n    if (this.state.error  === '' && this.state.web3Balance === '') {\n      this.loadWeb3Balance()\n    }\n\n    if (this.state.error  === '' && this.state.ethjsBalance === '') {\n      this.loadEthJsBalance()\n    }\n  }\n\n  async loadWeb3() {\n    this.web3 = new Web3(window.ethereum || \"http://localhost:8545\")\n\n    try {\n      const accounts = await window.ethereum.enable()\n      this.setState({ account: accounts[0] })\n    } catch (error) {\n      this.setState({ error: error })\n    }\n  }\n\n  loadEthJs() {\n    this.ethjs = new EthJs(window.ethereum)\n  }\n\n  async loadEthQueryBalance() {\n    const query = pify(new EthQuery(window.ethereum))\n    const balance = await query.getBalance(this.state.account)\n    this.setState({ ethQueryBalance: balance })\n  }\n\n  async loadWeb3Balance() {\n    const addressArray = [this.state.account]\n    const ethContract = this.web3.eth.contract(SINGLE_CALL_BALANCES_ABI).at(SINGLE_CALL_BALANCES_ADDRESS)\n    const ethBalance = ['0x0']\n\n    ethContract.balances(addressArray, ethBalance, (error, result) => {\n      if (error) {\n        log.error(error)\n      } else {\n        this.setState({ web3Balance: bnToHex(result[0]) })\n      }\n\n    })\n  }\n\n  async loadEthJsBalance() {\n    const addressArray = [this.state.account]\n    const ethContract = this.ethjs.contract(SINGLE_CALL_BALANCES_ABI).at(SINGLE_CALL_BALANCES_ADDRESS)\n    const ethBalance = ['0x0']\n\n    ethContract.balances(addressArray, ethBalance, (error, result) => {\n      if (error) {\n        log.error(error)\n        this.setState({ error: error })\n      } else {\n        this.setState({ ethjsBalance: bnToHex(result[0]) })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Balance Checker</h1>\n        <p>Your account: {this.state.account}</p>\n        <p>Eth Query Balance: {this.state.ethQueryBalance}</p>\n        <p>Web3 Contract Balance: {this.state.web3Balance}</p>\n        <p>EthJs Contract Balance: {this.state.ethjsBalance}</p>\n        <button onClick={this.loadEthQueryBalance}>\n          EthQuery Balance\n        </button>\n        <button onClick={this.loadWeb3Balance}>\n          Web3 Balance Contract\n        </button>\n        <button onClick={this.loadEthJsBalance}>\n          EthJs Balance Contract\n        </button>\n        <p style={{color: 'red'}}>{this.state.error.message}</p>\n      </div>\n    );\n  }\n}\n\nfunction bnToHex (inputBn) {\n  return ethUtil.addHexPrefix(inputBn.toString(16))\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}